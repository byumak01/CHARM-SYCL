#!/usr/bin/env python3
import os
import yaml
from packaging.version import parse
import hashlib

SRC_DIR = os.path.abspath(os.path.join(__file__, "../.."))
CI_FILE = os.path.join(SRC_DIR, ".gitlab-ci.yml")
BUILD_TYPES = ["Debug", "Release"]

UBUNTU_VER = "22.04"

IRIS_COMMIT = "b616981626b5a4f9df904131ef00f637d3dd984f"


def set_iris_cache(job):
    if not job.get("before_script"):
        job["before_script"] = []
    job["before_script"] += [
        'git config --global http.sslCAInfo "${CI_SERVER_TLS_CA_FILE}"',
        'git clone "${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_PROJECT_NAMESPACE}/iris.git" iris_src',
        "cd iris_src",
        "git clean -ffdx",
        "git fetch origin",
        f"git checkout {IRIS_COMMIT}",
        "git log -1",
        'cmake -S "${CI_PROJECT_DIR}/iris_src" -B "${CI_PROJECT_DIR}/iris_build" "-DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/iris" "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}" -DBUILD_SHARED_LIBS=NO -DTRACE_DISABLE=${TRACE_DISABLE} -DDEBUG_DISABLE=${DEBUG_DISABLE}',
        'cmake --build "${CI_PROJECT_DIR}/iris_build" -j 4',
        'cmake --install "${CI_PROJECT_DIR}/iris_build"',
    ]


def context_hash(dockerfile, build_args):
    h = hashlib.sha256()

    with open(dockerfile, "rb") as f:
        h.update(f.read())
        h.update(b"\x00")

    for k in list(sorted(build_args.keys())):
        h.update(f"{k}={build_args[k]}".encode("UTF-8"))
        h.update(b"\x00")

    return h.hexdigest()


def build_ubuntu(
    ci, images, /, os_tag=None, llvm=None, cuda=None, iris=False, rocm=None
):
    job = {}
    name = f"build_image_ubuntu{os_tag}_llvm{llvm}"
    if cuda:
        name += f"_cuda{cuda}"
    if rocm:
        name += f"_rocm{rocm}"

    args = dict(LLVM=llvm)
    if cuda:
        args["BASE_IMAGE"] = "nvidia/cuda"
        args["BASE_TAG"] = f"{cuda}-devel-ubuntu{os_tag}"
    else:
        args["BASE_IMAGE"] = "ubuntu"
        args["BASE_TAG"] = os_tag
    args["ROCM"] = rocm
    args["UID"] = "1000"
    args["RENDER_GID"] = "109"

    dockerfile = "ci/Dockerfile"
    h = context_hash(os.path.join(SRC_DIR, dockerfile), args)

    image = "${CI_REGISTRY_IMAGE}:"
    image += f"llvm{llvm}"
    if cuda:
        image += f"-cuda{cuda}"
    if rocm:
        image += f"-rocm{rocm}"
    image += f"-{h}"

    build_args = " ".join([f"--build-arg '{k}={v}'" for k, v in args.items()])

    job["stage"] = "build_images"
    job["image"] = dict(name="docker")
    job["tags"] = ["docker"]
    job["variables"] = dict(image=image)
    job["script"] = [
        "pwd",
        "ls -l",
        'docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"',
        'docker pull "${image}" || true',
        f'if [[ -z "$(docker image ls -q "{image}")" ]]; then docker buildx build {build_args} -t "${{image}}" - < "${{CI_PROJECT_DIR}}/{dockerfile}" && docker push "{image}" || exit 1; fi',
    ]

    ci[name] = job
    images[image] = name
    return (name, image)


def run(ci, /, build_name, image, use_cuda, use_hip, build_type, iris):
    name = f"test_{build_type}_" + build_name.replace("build_image_", "")
    job = {}

    if iris:
        name += f"_iris-{IRIS_COMMIT[0:8]}"
        set_iris_cache(job)
        use_iris = "YES"
        iris_dir = "${CI_PROJECT_DIR}/iris"
    else:
        use_iris = "NO"
        iris_dir = "x"

    job["stage"] = "tests"
    job["image"] = dict(name=image)
    job["variables"] = dict(
        GIT_SUBMODULE_STRATEGY="normal",
        CMAKE_BUILD_TYPE=build_type,
        CHARM_SYCL_CUDA_IS_REQUIRED="YES" if use_cuda else "NO",
        CHARM_SYCL_HIP_IS_REQUIRED="YES" if use_hip else "NO",
        USE_IRIS=use_iris,
        IRIS_DIR=iris_dir,
        TRACE_DISABLE="ON",
        DEBUG_DISABLE="ON",
    )
    job["tags"] = ["docker"]
    if use_cuda:
        job["tags"].append("cuda")
    job["script"] = ['"${CI_PROJECT_DIR}/ci/test.sh"']

    ci[name] = job


ci = {}
images = {}
ci["stages"] = ["build_images", "tests"]
ci["variables"] = dict(FF_USE_FASTZIP="true", CACHE_COMPRESSION_LEVEL="fast")

for llvm, cuda in [("13", "11.8.0"), ("14", "11.8.0"), ("15", "12.1.1")]:
    rocm = "5.6"
    (name, image) = build_ubuntu(
        ci, images, os_tag=UBUNTU_VER, llvm=llvm, cuda=cuda, rocm=rocm
    )
    for build_type in BUILD_TYPES:
        run(
            ci,
            build_name=name,
            image=image,
            use_cuda=True,
            use_hip=True,
            build_type=build_type,
            iris=True,
        )

with open(CI_FILE, "w") as f:
    print("#", file=f)
    print("# This file is automatically generated by ci/gen.py", file=f)
    print("#", file=f)
    yaml.dump(ci, f)
