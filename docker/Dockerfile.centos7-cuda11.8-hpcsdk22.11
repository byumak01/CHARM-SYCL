# syntax=docker/dockerfile:1.5-labs

# --------------------------------

FROM spack/centos7:v0.20.0 as base

WORKDIR /spack

RUN spack env create -d . && \
    sed -i -e 's,view: true,view: /spack/view,' spack.yaml && \
    echo "  config:" >> spack.yaml && \
    echo "    install_tree: /spack/" >> spack.yaml

ARG SPACK_INSTALL_FLAGS="" SPACK_GCC_VER=11.3.0

RUN spack env activate . && \
    spack add gcc@${SPACK_GCC_VER} && \
    spack install --fail-fast ${SPACK_INSTALL_FLAGS}

RUN spack env activate . && \
    spack load gcc@${SPACK_GCC_VER} && \
    spack compiler find

RUN spack env activate . && \
    spack add ncurses@6.4%gcc@${SPACK_GCC_VER} -termlib && \
    spack install --fail-fast ${SPACK_INSTALL_FLAGS}

RUN spack env activate . && \
    spack add cmake@3.26.3%gcc@${SPACK_GCC_VER} -ncurses && \
    spack install --fail-fast ${SPACK_INSTALL_FLAGS}

RUN spack env activate . && \
    spack add llvm@14.0.6%gcc@${SPACK_GCC_VER} +llvm_dylib +link_llvm_dylib targets=x86 && \
    spack install --fail-fast ${SPACK_INSTALL_FLAGS}

RUN spack env activate . && \
    spack add ninja@1.11.1%gcc@${SPACK_GCC_VER} && \
    spack install --fail-fast ${SPACK_INSTALL_FLAGS}

RUN spack env activate . && spack gc -y

# --------------------------------

FROM nvcr.io/nvidia/nvhpc:22.11-devel-cuda11.8-centos7 as build

COPY --from=base /spack /spack

WORKDIR /src

COPY . .

ENV CC=/spack/view/bin/clang \
    CXX=/spack/view/bin/clang++ \
    CMAKE_PREFIX_PATH=/spack/view:${CMAKE_PREFIX_PATH} \
    PATH=/spack/view/bin:${PATH} \
    LD_LIBRARY_PATH=/spack/view/lib:/spack/view/lib64:${LD_LIBRARY_PATH}

WORKDIR /iris
WORKDIR /iris-build

RUN sed -i -e 's,#include <bits/stdc++.h>,#include <fstream>,' /src/iris/src/runtime/JSON.cpp && \
    cmake -S /src/iris -B . \
    -DCMAKE_C_COMPILER="${CC}" \
    -DCMAKE_C_FLAGS="-stdlib=libc++" \
    -DCMAKE_CXX_COMPILER="${CXX}" \
    -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
    -DCMAKE_CXX_FLAGS_RELEASE_INIT="-O3" \
    -DCMAKE_EXE_LINKER_FLAG="-stdlib=libc++ -static-libstdc++" \
    -DCMAKE_SHARED_LINKER_FLAGS="-stdlib=libc++ -static-libstdc++" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_INSTALL_PREFIX=/iris \
    -DBUILD_SHARED_LIBS=NO \
    -DTRACE_DISABLE=YES \
    -DDEBUG_DISABLE=YES \
    && \
    make -j8 && make install

WORKDIR /build

RUN cmake -S /src -B . -G Ninja \
    -DCMAKE_C_COMPILER=${CC} \
    -DCMAKE_CXX_COMPILER=${CXX} \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=NO \
    -DCMAKE_INSTALL_PREFIX=/charm-sycl \
    -DCHARM_SYCL_USE_CLANG_DYLIB=YES \
    -DCHARM_SYCL_RUNTIME_STDLIB=libc++ \
    -DCHARM_SYCL_CUDA_IS_REQUIRED=YES \
    -DCSCC_USE_LINKER=lld -DCSCC_USE_LIBCXX=YES \
    -DCSCC_USE_LIBCXX_STATIC=YES \
    -DCSCC_CUDA_HOST_COMPILER=/spack/view/bin/g++ \
    -DCSCC_LIBCXXABI_PATH=/spack/view/lib/libc++abi.a \
    -DUSE_IRIS=YES \
    -DIRIS_DIR=/iris \
    -DCHARM_SYCL_IRIS_IS_REQUIRED=YES \
    && \
    cmake --build . && \
    cmake --install . && \
    cmake --build . --target bench-install

### Check
RUN /charm-sycl/bin/cscc -v /src/bench/vecadd/main.cpp /src/bench/vecadd/sycl.cpp && \
    rm a.out

# --------------------------------

FROM spack/centos7:v0.20.0 as dist

ARG SPACK_GCC_VER=11.3.0

COPY --from=base /spack /spack

RUN rm -r /spack/*/gcc-${SPACK_GCC_VER}/cmake-* && \
    rm -r /spack/*/gcc-${SPACK_GCC_VER}/ninja-* && \
    rm /spack/*/gcc-${SPACK_GCC_VER}/llvm-*/lib/libLLVM*.a && \
    rm /spack/*/gcc-${SPACK_GCC_VER}/llvm-*/lib/libclang*.a && \
    rm /spack/*/gcc-${SPACK_GCC_VER}/llvm-*/lib/libPolly*.a && \
    rm /spack/*/gcc-${SPACK_GCC_VER}/llvm-*/lib/liblld*.a && \
    rm -r /spack/*/gcc-${SPACK_GCC_VER}/llvm-*/include/{clang,clang-c,clang-tidy,lld,lldb,llvm,llvm-c,polly}

# --------------------------------

FROM nvcr.io/nvidia/nvhpc:22.11-devel-cuda11.8-centos7 as final

COPY --from=dist /spack /spack
COPY --from=build /charm-sycl /charm-sycl
COPY --from=build /iris /iris

ENV PATH=/spack/view/bin:${PATH} \
    LD_LIBRARY_PATH=/spack/view/lib:/spack/view/lib64:${LD_LIBRARY_PATH}

ARG GIT_COMMIT="unknown"
RUN echo "${GIT_COMMIT}" > /charm-sycl/git-commit

RUN echo '#!/bin/bash' > entrypoint.sh && \
    echo 'if test $# -ne 0; then' >> entrypoint.sh && \
    echo '  case "$1" in' >> entrypoint.sh && \
    echo '  /*) exec "$@";;' >> entrypoint.sh && \
    echo '  esac' >> entrypoint.sh && \
    echo 'fi' >> entrypoint.sh && \
    echo 'exec /charm-sycl/bin/cscc "$@"' >> entrypoint.sh && \
    chmod +x entrypoint.sh

RUN useradd -m -u 1000 user
USER 1000

ENTRYPOINT ["/entrypoint.sh"]
